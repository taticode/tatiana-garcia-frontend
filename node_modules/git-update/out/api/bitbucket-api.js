"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var axios_1 = require("axios");
var Repository_1 = require("../model/Repository");
var logger_1 = require("../logger");
var utils_1 = require("../utils");
var ApiConfig_1 = require("../model/ApiConfig");
var tansformData = function (data, namespace) {
    return data.values.map(function (repo) {
        // select ssh link rather than https
        var link = repo.links.clone.filter(function (l) { return l.name === "ssh"; });
        return new Repository_1.default({ link: link[0].href, name: repo.name, namespace: namespace });
    });
};
var getReposInNamespaces = function (config) { return __awaiter(_this, void 0, void 0, function () {
    var links;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, Promise.all(config.namespaces.map(function (t) {
                    return axios_1.default({
                        url: config.url + "/2.0/repositories/" + t + "?pagelen=40", auth: config.creds, method: "get"
                    }).then(function (d) { return tansformData(d.data, t); });
                }))
                // console.log(links)
            ];
            case 1:
                links = _a.sent();
                // console.log(links)
                return [2 /*return*/, links.reduce(function (pre, cur) {
                        return pre.concat(cur);
                        // return pre;
                    }, [])];
        }
    });
}); };
var BitBucketApi = (function () {
    function BitBucketApi(program) {
        var token = program.token.split(":");
        var credentials = { username: token[0], password: token[1] };
        var namespaces = program.namespace.split(",").map(function (s) { return s.trim(); });
        this.config = new ApiConfig_1.default({
            dir: program.dir, url: program.url || "https://api.bitbucket.org", namespaces: namespaces, creds: credentials
        });
    }
    BitBucketApi.prototype.listRepositories = function () {
        getReposInNamespaces(this.config).then(function (repos) {
            logger_1.default.debug("total projects: ", repos.length);
            repos.map(function (r) { return console.log(r.namespace + "/" + r.name); });
        });
    };
    BitBucketApi.prototype.cloneOrUpdateRepositories = function () {
        var _this = this;
        getReposInNamespaces(this.config).then(function (repos) {
            logger_1.default.debug("total projects: ", repos.length);
            utils_1.cloneProjects(repos, { dir: _this.config.dir });
        });
    };
    return BitBucketApi;
}());
exports.default = BitBucketApi;
